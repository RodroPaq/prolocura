{"version":3,"sources":["components/Header.js","components/Items.js","components/Productos.js","components/Menu.js","components/HookFetch.js","App.js","serviceWorker.js","index.js"],"names":["Header","menu","empresa","className","Imagen","src","width","alt","Nombre","map","i","k","titulo","replace","activeClass","href","id","key","data-toggle","role","aria-controls","aria-selected","Items","Descripcion","Valor","toFixed","Productos","categoria","dk","aria-labelledby","Menu","Subcategorias","useFetch","url","useState","data","setData","loading","setLoading","useEffect","a","fetch","then","response","json","fetchUrl","App","window","location","pathname","split","dataEmpresa","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.48796cbf.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = ({menu,empresa}) => {   \r\n    return (  \r\n        <div className=\"nav-scroller fixed-top shadow-lg bg-4B4453\">\r\n            <nav className=\"nav nav-underline\">\r\n            {empresa.Imagen !== null ?\r\n            <img src={\"Imagenes/\" + empresa.Imagen} width=\"5%\" className=\"d-inline-block align-top img-responsive ml-3 mt-1\" alt=\"\" />\r\n            :\r\n            <span className=\"nav-link active text-info\" >{empresa.Nombre}</span>            \r\n            }\r\n            {menu.map((i,k) => {\r\n               let titulo = i.Nombre.replace(/ /g, \"-\");\r\n               let activeClass = (k === 0 ? \"nav-link text-white active\" : \"nav-link text-white\" );\r\n               return (<a className={activeClass} href={\"#\" + titulo} id={titulo + \"-tab\"} key={k}  data-toggle=\"tab\" role=\"tab\" aria-controls={titulo} aria-selected=\"true\">{i.Nombre}</a>)               \r\n            })}\r\n             \r\n            </nav>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Header;","import React, { Fragment } from 'react';\r\n\r\n\r\n\r\nconst Items = ({menu}) => {        \r\n    return (        \r\n        <Fragment>                \r\n                {menu.map( (i,k) => {                    \r\n                    return(\r\n                        <li className=\"list-group-item\" key={k}>\r\n                            <div className=\"row pl-3\">\r\n                                <div className=\"col-7 col-md-8 col-lg-8\">\r\n                                        <h6>{i.Nombre}</h6>\r\n                                        {i.Descripcion != null ? <small className=\"text-secondary font-italic\">{i.Descripcion}</small> : null}\r\n                                </div>\r\n                                <div className=\"col-5 col-md-4 col-lg-4 text-right\">\r\n                                    <span className=\"badge badge-light text-right p-1\">$ {i.Valor.toFixed(2)}</span>\r\n                                </div>\r\n                            </div>\r\n                        </li>\r\n                    )\r\n                })}            \r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Items;","import React, { Fragment } from 'react';\r\nimport Items from './Items'\r\n\r\n\r\n\r\nconst Productos = ({menu,categoria,dk}) => {    \r\n    let titulo = categoria.replace(/ /g, \"-\");\r\n    let activeClass = (dk === 0 ? \"tab-pane fade active col-12 show\" : \"tab-pane fade col-12\" );\r\n    return (        \r\n        <Fragment>        \r\n        <div className={activeClass} id={titulo} role=\"tabpanel\" aria-labelledby=\"nav-home-tab\">            \r\n        <h1 className=\"display-6 border-bottom pb-2 mb-2 mt-3\">{categoria}</h1>\r\n            <ul className=\"list-group list-group-flush\">\r\n                {menu.map( (i,k) => {                    \r\n                    return(\r\n                        <Fragment> \r\n                        <li className=\"list-group-item\" key={k}>\r\n                            <div className=\"row\">\r\n                                <div className=\"col-7 col-md-8 col-lg-8\">\r\n                                        <h5>{i.Nombre}</h5>\r\n                                </div>\r\n                            </div>\r\n                        </li>\r\n                        <Items menu={i.Productos} />\r\n                        </Fragment>\r\n                    )\r\n                })}\r\n            </ul>\r\n        </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Productos;","import React from 'react';\r\nimport Productos from './Productos'\r\n\r\nconst Menu = ({menu}) => {    \r\n    return (  \r\n        <div className=\"row mt-2 mb-5 mt-5\">\r\n            <div className=\"tab-content col-12\" id=\"nav-tabContent\">                \r\n                {menu.map((i,k) => {\r\n                   return(<Productos menu={i.Subcategorias} categoria={i.Nombre} key={k} dk={k}/>)\r\n                })}                                 \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Menu;","import { useState, useEffect } from \"react\";\r\n\r\nfunction useFetch(url) {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  \r\n  useEffect((url) => {\r\n    async function fetchUrl(url) {\r\n      fetch(url)\r\n      .then(response => {\r\n        return response.json()\r\n      })\r\n      .then((data) => {      \r\n        setData(data);\r\n        setLoading(false);\r\n      })\r\n      // .catch((error) => {\r\n      //   setError(error)\r\n      // })\r\n  \r\n  \r\n    }\r\n    fetchUrl();\r\n  }, [data]);\r\n  return [data, loading];\r\n}\r\nexport { useFetch };","import React,{Fragment} from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Menu from './components/Menu';\nimport { useFetch } from './components/HookFetch';\n\nfunction App() {\n\n   var pathArray = window.location.pathname.split('/');\n\n  \n  const [dataEmpresa] = useFetch(\n     \"http://vhali.com.ar/api/pedidos/local/de-niro-1\" //+ pathArray[1]\n  );\n\n   const [data] = useFetch(\n     \"http://vhali.com.ar/api/pedidos/menu/de-niro-1\" //+ pathArray[1]\n   );\n\n\n  return (\n     <Fragment>\n      <Header menu={data} empresa={dataEmpresa}/>\n       <Menu menu={data} />\n     </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}